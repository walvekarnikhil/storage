#!/bin/bash

# Notes:
#  - Please install "jq" package before using this driver.
WAIT_SLEEP_TIME_IN_SECONDS=2

if [ -e "$(dirname $0)/common.sh" ]; then
    source $(dirname $0)/common.sh
elif [ -e "$(dirname $0)/../common/common.sh" ]; then
    source $(dirname $0)/../common/common.sh
fi

get_meta_data() {
    EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone 2>/dev/null`
    EC2_REGION="`echo \"${EC2_AVAIL_ZONE}\" | sed -e 's:\([0-9][0-9]*\)[a-z]*\$:\\1:'`"
    INSTANCE_ID=`curl http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null`
    local instances=`aws ec2 describe-instances --region ${EC2_REGION} --instance-ids ${INSTANCE_ID}`
    SUBNET_ID=`echo "${instances}" | jq -r '.Reservations[0].Instances[0].SubnetId'`
    VPC_ID=`echo "${instances}" | jq -r '.Reservations[0].Instances[0].VpcId'`
}

wait_fs_transition() {
    local current_state=$1
    local start_state=$1
    local end_state=$2
    while [ "${current_state}" == "${start_state}" ]; do
        sleep ${WAIT_SLEEP_TIME_IN_SECONDS}
        local fileSystems
        fileSystems=`aws efs describe-file-systems --region ${EC2_REGION} --file-system-id ${FSID} 2>&1`
        if [ $? -ne 0 ]; then
            print_error "Failed to describe fs ${FSID}: ${fileSystems}"
        fi
        current_state=$(echo ${fileSystems} | jq -r '.FileSystems[0].LifeCycleState')
    done
    if [ "${current_state}" != "${end_state}" ]; then
        print_error "Failed fs ${FSID} transition, expected end state is: ${end_state}, got ${current_state}"
    fi

}

wait_mount_target_transition() {
    local current_state=$1
    local start_state=$1
    local end_state=$2
    while [ "${current_state}" == "${start_state}" ]; do
        sleep ${WAIT_SLEEP_TIME_IN_SECONDS}
        local mountTargets
        mountTargets=`aws efs describe-mount-targets --region ${EC2_REGION} --mount-target-id ${MOUNT_TARGET_ID} 2>&1`
        if [ $? -ne 0 ]; then
            print_error "Failed to describe mount target ${MOUNT_TARGET_ID}: ${mountTargets}"
        fi
        current_state=$(echo ${mountTargets} | jq -r '.MountTargets[0].LifeCycleState')
    done
    if [ "${current_state}" != "${end_state}" ]; then
        print_error "Failed mount target ${MOUNT_TARGET_ID} transition, expected end state is: ${end_state}, got ${current_state}"
    fi

}

wait_mount_target_deleting() {
    local num=1
    while [ "${num}" == 1 ]; do
        sleep ${WAIT_SLEEP_TIME_IN_SECONDS}
        local fileSystems
        fileSystems=`aws efs describe-file-systems --region ${EC2_REGION} --file-system-id ${FSID} --mount-target-id ${MOUNT_TARGET_ID} 2>&1`
        if [ $? -ne 0 ]; then
            err "{ \"status\": \"Failure\", \"message\": \"Failed to describe fs ${FSID}: ${fileSystems}\"}"
            exit 1
        fi
        num=$(echo ${fileSystems} | jq -r '.FileSystems[0].NumberOfMountTargets')
    done
}


init() {
    unset_aws_credentials_env

    get_meta_data

    case $EC2_REGION in
        us-east-1 ) ;;
        us-east-2 ) ;;
        us-west-2 ) ;;
        eu-west-1 ) ;;
        * ) print_error EFS unavailable in region $EC2_REGION;;
    esac

    print_success
}

create() {
    if [ ! -z "${OPTS[fsid]}" ]; then
        print_success
        exit 0
    fi
    
    if [ -z "${OPTS[name]}" ]; then
        print_error "name is required"
    fi

    local performanceMode=""
    if [ ! -z "${OPTS[performanceMode]}" ]; then
        performanceMode="--performance-mode ${OPTS[performanceMode]}"
    fi

    unset_aws_credentials_env

    get_meta_data

    # Check if an EFS volume with the same creation token exists
    local existing_fs
    existing_fs=`aws efs describe-file-systems --region ${EC2_REGION} --creation-token ${OPTS[name]} | grep -c ${OPTS[name]}`
    
    if [ $existing_fs -gt 0 ]; then
        print_success
        exit 0
    fi
    
    # create a EFS FS using aws-cli
    local fs
    fs=`aws efs create-file-system --region ${EC2_REGION} --creation-token ${OPTS[name]} ${performanceMode} 2>&1`
    if [ $? -ne 0 ]; then
        print_error "Failed in create: ${fs}"
    fi
    FSID=$(echo ${fs} | jq -r '.FileSystemId')

    wait_fs_transition "creating" "available"

    # Use an existing security group if that is passed; else create a new security group
    local mountTargetSGID
    local useExistingSecGrp
    
    if [ ! -z "${OPTS[mountTargetSGID]}" ] || [ ! -z "${OPTS[mountTargetSGName]}" ]; then
        # If security group name is provided then get the group id
        if [ ! -z "${OPTS[mountTargetSGName]}" ]; then
            local mountTargetSGIDResponse
            mountTargetSGIDResponse=`aws ec2 describe-security-groups --region ${EC2_REGION} --filters Name=vpc-id,Values=${VPC_ID} --filters Name=tag-key,Values=Name Name=tag-value,Values=${OPTS[mountTargetSGName]} --query SecurityGroups[*].{GroupId:GroupId}`
            mountTargetSGID=$(echo ${mountTargetSGIDResponse} | jq -r '.[].GroupId')
        else
            mountTargetSGID=${OPTS[mountTargetSGID]}
        fi
        
        useExistingSecGrp=true
    else
         # create a security group for mount target
        local description="From cattle EFS driver, SG for mount target of EFS: ${FSID}"
        local groupName="SG-Mount-Target-EFS-${FSID}"
        local mtSG
        mtSG=`aws ec2 create-security-group --region ${EC2_REGION} --vpc-id ${VPC_ID} --group-name ${groupName} --description "${description}" 2>&1`
        if [ $? -ne 0 ]; then
            print_error "Failed in create: create-security-group. ${mtSG}"
        fi
        
        mountTargetSGID=$(echo ${mtSG} | jq -r '.GroupId')

        # open NFS4.1 port 2049 on the security group just created
        local error
        error=`aws ec2 authorize-security-group-ingress --region ${EC2_REGION} --group-id ${mountTargetSGID} --protocol tcp --port 2049 --cidr 0.0.0.0/0 2>&1`
        if [ $? -ne 0 ]; then
            print_error "Failed in create: authorize-security-group-ingress for SG ${mountTargetSGID}. ${error}"
        fi
        
        useExistingSecGrp=false
    fi
    
    # create a mount target for the EFS
    local fsMountTarget
    fsMountTarget=`aws efs create-mount-target --region ${EC2_REGION} --file-system-id ${FSID} --subnet-id ${SUBNET_ID} --security-group ${mountTargetSGID} 2>&1`
    if [ $? -ne 0 ]; then
        print_error "Failed in create: ${fsMountTarget}"
    fi
    MOUNT_TARGET_ID=$(echo ${fsMountTarget} | jq -r '.MountTargetId')

    wait_mount_target_transition "creating" "available"

    # tag the newly created volume
#    error=`aws efs create-tags --region ${EC2_REGION} --file-system-id ${FSID} --tags Key=Name,Value=${OPTS[name]} Key="Instance Type",Value="${OPTS[InstanceType]}" Key=Category,Value="${OPTS[Category]}" Key="Deployment Type",Value="${OPTS[DeploymentType]}" Key="Centric Owner",Value="${OPTS[CentricOwner]}" Key="Customer Name",Value="${OPTS[CustomerName]}" Key=Application,Value="${OPTS[Application]}" 2>&1`

#   efsTags=${OPTS[TAGS]}

   # efsTags=`echo -e "$efsTags" | tr -d '\\\"' 2>&1` 
#   efsTags=`echo -e "$efsTags" | tr '\\\"' "'" 2>&1`

#   applyTags="aws efs create-tags --region ${EC2_REGION} --file-system-id ${FSID} --tags Key=Name,Value=${OPTS[name]} ${efsTags} 2>&1"

#   error=$( echo ${applyTags} ) 
    error="$(aws efs create-tags --region ${EC2_REGION} --file-system-id ${FSID} --tags Key=Name,Value=${OPTS[name]} ${OPTS[TAGS]} 2>&1)"
   if [ $? -ne 0 ]; then
        print_error "Failed in create: create-tags for EFS ${FSID} Key=Name,Value=${OPTS[name]} failed. ${error}}"
    fi

    print_options created true fsid ${FSID} mountTargetSGID ${mountTargetSGID} useExistingSecGrp ${useExistingSecGrp}
}

delete() {
    if [ -z "${OPTS[created]}" ]; then
        print_success
        exit 0
    fi

    if [ -z "${OPTS[fsid]}" ]; then
        print_error "fsid is required"
    fi

    if [ -z "${OPTS[mountTargetSGID]}" ]; then
        print_error "mountTargetSGID is required"
    fi

    FSID=${OPTS[fsid]}
    
    unset_aws_credentials_env

    get_meta_data

    # get the list of available mount targets and store it into array named 'mountTargetsArray'
    mapfile -n 0 -t mountTargetsArray < <(aws efs describe-mount-targets --region ${EC2_REGION}  --file-system-id ${FSID} | jq -c -r '.MountTargets[].MountTargetId')

    local error
    
    # delete all the mount points associated with efs file system
    for ((i=0;i < ${#mountTargetsArray[@]} ; i+=1)) do
        
        MOUNT_TARGET_ID=${mountTargetsArray[i]}
        
        error=`aws efs delete-mount-target --region ${EC2_REGION} --mount-target-id ${MOUNT_TARGET_ID} 2>&1`
        if [ $? -ne 0 ]; then
            if [ "$(echo $error | grep 'MountTargetNotFound')" ]; then
                print_success Mount target does not exist
                exit 0
            else
                print_error "${MOUNT_TARGET_ID}: ${error}"
            fi
        fi

        wait_mount_target_deleting
    done
    
    # Delete the security group if it was created as part of EFS instance creation
    if [ "${OPTS[useExistingSecGrp]}" == "false" ]; then
        local mountTargetSGID=${OPTS[mountTargetSGID]}
        error=`aws ec2 delete-security-group --region ${EC2_REGION} --group-id ${mountTargetSGID} 2>&1`
        if [ $? -ne 0 ]; then
            print_error "Failed to delete mount target security group ${mountTargetSGID}. ${error}"
        fi
    fi
    
    error=`aws efs delete-file-system --region ${EC2_REGION} --file-system-id ${FSID} 2>&1`
    if [ $? -ne 0 ]; then
        print_error "Failed to delete volume ${FSID}. ${error}"
    fi

    print_success
}

attach() {
    print_not_supported
}

detach() {
    print_not_supported
}

mountdest() {
    if [ -z "${OPTS[fsid]}" ]; then
        print_error "fsid is required"
    fi

    local mntOptions="-o vers=4.1"
    if [ ! -z "${OPTS[mntOptions]}" ]; then
        mntOptions="-o ${OPTS[mntOptions]}"
    fi

    local efsExport="${OPTS[export]}"
    if [ -z "$efsExport" ]; then
        efsExport="/"
    fi

    if [ $(ismounted "${MNT_DEST}") == 1 ]; then
        print_success
        exit 0
    fi

    unset_aws_credentials_env

    get_meta_data

    local isMountPointAlreadyCreated=false
    
    # get the list of available subnets and store it into array named 'subnetMounts'
    mapfile -n 0 -t subnetMounts < <(aws efs describe-mount-targets --region ${EC2_REGION}  --file-system-id ${OPTS[fsid]} | jq -c -r '.MountTargets[].SubnetId')

    # Check if the EFS is already mounted in the current subnet
    for ((i=0;i < ${#subnetMounts[@]} ; i+=1)) do
        if [ "${SUBNET_ID}" == "${subnetMounts[i]}" ]; then
            isMountPointAlreadyCreated=true
        fi
    done
    
    # Create a new mount-target in current region and subnet if one doesn't already exist
    if [ "$isMountPointAlreadyCreated" == "false" ]; then
        # create a mount target for the EFS
        local fsMountTarget
        fsMountTarget=`aws efs create-mount-target --region ${EC2_REGION} --file-system-id ${OPTS[fsid]} --subnet-id ${SUBNET_ID} --security-group ${OPTS[mountTargetSGID]} 2>&1`
        if [ $? -ne 0 ]; then
            print_error "Failed in create: ${fsMountTarget}"
        fi
        
        MOUNT_TARGET_ID=$(echo ${fsMountTarget} | jq -r '.MountTargetId')
        
        wait_mount_target_transition "creating" "available"
    fi
    
    local efsMountDNS="${EC2_AVAIL_ZONE}.${OPTS[fsid]}.efs.${EC2_REGION}.amazonaws.com"
    # Amazon takes a while to make the mount target resolvable via DNS, so wait up to 60 seconds
    for (( i=0; i<60; i=i+1 )); do
        if [ "$(dig +short $efsMountDNS)" != "" ]; then
            break
        fi
        sleep 1
    done

    mkdir -p "${MNT_DEST}"
    get_host_process_pid
    local error

    error=`nsenter -t $TARGET_PID -n mount -t nfs4 ${mntOptions} ${efsMountDNS}:${efsExport} ${MNT_DEST} 2>&1`

    if [ $? -ne 0 ]; then
        print_error "Failed to mount ${efsMountDNS}:${efsExport} at ${MNT_DEST}. ${error}"
    fi

    print_success
}

unmount() {
    if [ $(ismounted "${MNT_DEST}") == 0 ] ; then
        print_success
        exit 0
    fi

    local error
    error=`umount ${MNT_DEST} 2>&1`
    if [ $? -ne 0 ]; then
        print_error "Failed to unmount volume at ${MNT_DEST}. ${error}"
    fi

    print_success
}

# Every script must call main as such
main "$@"
